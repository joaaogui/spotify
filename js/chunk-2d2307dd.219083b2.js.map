{"version":3,"sources":["webpack:///./node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","webpack:///./node_modules/@babel/runtime/helpers/esm/iterableToArray.js","webpack:///./node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","webpack:///./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","webpack:///./src/api/index.js","webpack:///./src/api/artist.js","webpack:///./src/api/album.js","webpack:///./src/api/track.js","webpack:///./src/utils/index.js"],"names":["_arrayWithoutHoles","arr","Array","isArray","arrayLikeToArray","_iterableToArray","iter","Symbol","iterator","Object","from","_nonIterableSpread","TypeError","_toConsumableArray","arrayWithoutHoles","iterableToArray","unsupportedIterableToArray","nonIterableSpread","axios","axiosInstance","create","baseURL","process","headers","store","state","token","getArtist","artist","get","getAlbums","artistId","offset","getSeveralAlbums","albums","getTracks","tracks","searchArtist","artistName","commit","searchAlbums","data","artists","items","id","Error","totalAlbums","push","next","searchSeveralAlbums","map","x","albumsIds","begin","end","length","slice","album","getTrackPopularity","track","flat","totalTracks","completeTracks","sort","a","b","popularity"],"mappings":"4NACe,SAASA,EAAmBC,GACzC,GAAIC,MAAMC,QAAQF,GAAM,OAAOG,eAAiBH,G,gFCFnC,SAASI,EAAiBC,GACvC,GAAsB,qBAAXC,QAA0BA,OAAOC,YAAYC,OAAOH,GAAO,OAAOJ,MAAMQ,KAAKJ,G,gBCD3E,SAASK,IACtB,MAAM,IAAIC,UAAU,wICGP,SAASC,EAAmBZ,GACzC,OAAOa,EAAkBb,IAAQc,EAAgBd,IAAQe,eAA2Bf,IAAQgB,I,uECFxFC,EAAQC,IAAcC,OAAO,CAC/BC,QAASC,8BACTC,QAAS,CAAC,+BAA2BC,OAAMC,MAAMC,UAGtCR,ICNFS,EAAY,SAACC,GAAD,OAAYV,EAAMW,IAAN,mBAAsBD,EAAtB,kBACxBE,EAAY,SAACC,EAAUC,GAAX,OAAsBd,EAAMW,IAAN,kBAAqBE,EAArB,0BAA+CC,EAA/C,2CCDlCC,EAAmB,SAACC,GAAD,OAAYhB,EAAMW,IAAN,sBAAyBK,KCAxDC,EAAY,SAACC,GAAD,OAAYlB,EAAMW,IAAN,sBAAyBO,KCGjDC,EAAY,yDAAG,WAAOC,GAAP,8FAC1Bd,OAAMe,OAAO,WAAYD,GADC,kBAGHX,EAAUW,GAHP,cAGlBV,EAHkB,gBAIlBY,EAAaZ,EAAOa,KAAKC,QAAQC,MAAM,GAAGC,IAJxB,gEAMlB,IAAIC,MAAJ,MANkB,yDAAH,sDAUnBL,EAAY,yDAAG,WAAOT,GAAP,kGACfe,EAAc,GADC,SAGbd,EAAS,EAHI,SAIEF,EAAUC,EAAUC,GAJtB,OAIbE,EAJa,OAKjBY,EAAYC,KAAZ,MAAAD,EAAW,EAASZ,EAAOO,KAAKE,QALf,UAMW,OAArBT,EAAOO,KAAKO,KANF,wBAOfhB,GAAU,GAPK,UAQAF,EAAUC,EAAUC,GARpB,QAQfE,EARe,OASfY,EAAYC,KAAZ,MAAAD,EAAW,EAASZ,EAAOO,KAAKE,QATjB,wCAWXM,EAAoBH,EAAYI,KAAI,SAAAC,GAAC,OAAIA,EAAEP,OAXhC,mEAaX,IAAIC,MAAJ,MAbW,0DAAH,sDAiBZI,EAAmB,yDAAG,WAAOG,GAAP,6FACtBN,EAAc,GADQ,SAGpBO,EAAQ,EACRC,EAAM,GAJc,YAKjBA,GAAOF,EAAUG,QALA,iCAMDtB,EAAiBmB,EAAUI,MAAMH,EAAOC,IANvC,OAMhBpB,EANgB,OAOtBmB,EAAQC,EAAM,EACdA,GAAO,GACPR,EAAYC,KAAZ,MAAAD,EAAW,EAASZ,EAAOO,KAAKP,OAAOgB,KAAI,SAAAO,GAAK,OAAIA,EAAMrB,OAAOO,WAT3C,wCAWlBe,EAAmBZ,EAAYI,KAAI,SAAAO,GAAK,OAAIA,EAAMP,KAAI,SAAAS,GAAK,OAAIA,EAAMf,SAAKgB,QAXxD,mEAalB,IAAIf,MAAJ,MAbkB,0DAAH,sDAiBnBa,EAAkB,yDAAG,WAAOtB,GAAP,6FACrByB,EAAc,GADO,SAGnBR,EAAQ,EACRC,EAAM,GAJa,YAKhBA,GAAOlB,EAAOmB,OAAS,IALP,iCAMQpB,EAAUC,EAAOoB,MAAMH,EAAOC,IANtC,OAMfQ,EANe,OAOrBT,EAAQC,EAAM,EACdA,GAAO,GACPO,EAAYd,KAAZ,MAAAc,EAAW,EAASC,EAAerB,KAAKL,SATnB,uBAWvBZ,OAAMe,OAAO,YAAasB,EAAYE,MAAK,SAACC,EAAGC,GAAJ,OAAWD,EAAEE,WAAaD,EAAEC,WAAc,GAAK,MAXnE,2DAcjB,IAAIrB,MAAJ,MAdiB,0DAAH","file":"js/chunk-2d2307dd.219083b2.js","sourcesContent":["import arrayLikeToArray from \"./arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import arrayWithoutHoles from \"./arrayWithoutHoles\";\nimport iterableToArray from \"./iterableToArray\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableSpread from \"./nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import axiosInstance from \"axios\"\nimport store from \"@/store/index\"\n\nconst axios = axiosInstance.create({\n    baseURL: process.env.VUE_APP_API_URL,\n    headers: {'Authorization': `Bearer ${store.state.token}`}\n})\n\nexport default axios","import axios from \"./index\"\n\nexport const getArtist = (artist) => axios.get(`search?q=${artist}&type=artist`)\nexport const getAlbums = (artistId, offset) => axios.get(`artists/${artistId}/albums?offset=${offset}&limit=50&include_groups=album,single`)","import axios from \"./index\"\n\nexport const getSeveralAlbums = (albums) => axios.get(`albums/?ids=${albums}`)","import axios from \"./index\"\n\nexport const getTracks = (tracks) => axios.get(`tracks/?ids=${tracks}`)","import {getAlbums, getArtist} from \"@/api/artist\";\nimport {getSeveralAlbums} from \"@/api/album\";\nimport {getTracks} from \"@/api/track\";\nimport store from \"@/store/index\"\n\nexport const searchArtist = async (artistName) => {\n  store.commit(\"setInput\", artistName)\n  try {\n    const artist = await getArtist(artistName)\n    await searchAlbums(artist.data.artists.items[0].id)\n  } catch (e) {\n    throw new Error(e)\n  }\n}\n\nconst searchAlbums = async (artistId) => {\n  let totalAlbums = []\n  try {\n    let offset = 0\n    let albums = await getAlbums(artistId, offset)\n    totalAlbums.push(...albums.data.items)\n    while (albums.data.next !== null) {\n      offset += 50\n      albums = await getAlbums(artistId, offset)\n      totalAlbums.push(...albums.data.items)\n    }\n    await searchSeveralAlbums(totalAlbums.map(x => x.id))\n  } catch (e) {\n    throw new Error(e)\n  }\n}\n\nconst searchSeveralAlbums = async (albumsIds) => {\n  let totalAlbums = []\n  try {\n    let begin = 0\n    let end = 20\n    while (end <= albumsIds.length) {\n      const albums = await getSeveralAlbums(albumsIds.slice(begin, end))\n      begin = end + 1\n      end += 20\n      totalAlbums.push(...albums.data.albums.map(album => album.tracks.items))\n    }\n    await getTrackPopularity(totalAlbums.map(album => album.map(track => track.id)).flat())\n  } catch (e) {\n    throw new Error(e)\n  }\n}\n\nconst getTrackPopularity = async (tracks) => {\n  let totalTracks = []\n  try {\n    let begin = 0\n    let end = 50\n    while (end <= tracks.length + 50) {\n      const completeTracks = await getTracks(tracks.slice(begin, end))\n      begin = end + 1\n      end += 50\n      totalTracks.push(...completeTracks.data.tracks)\n    }\n    store.commit(\"setTracks\", totalTracks.sort((a, b) => (a.popularity < b.popularity) ? 1 : -1))\n\n  } catch (e) {\n    throw new Error(e)\n  }\n}\n"],"sourceRoot":""}